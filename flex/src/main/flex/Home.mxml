<?xml version="1.0" encoding="utf-8"?>

<!--
  GRANITE DATA SERVICES
  Copyright (C) 2011 GRANITE DATA SERVICES S.A.S.

  This file is part of Granite Data Services.

  Granite Data Services is free software; you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation; either version 3 of the License, or (at your
  option) any later version.

  Granite Data Services is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
  for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with this library; if not, see <http://www.gnu.org/licenses/>.
-->

<s:VGroup
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:c="org.granite.tide.collections.*"
    xmlns:v="org.granite.validation.*"
    xmlns="*"
    width="100%" height="100%">

	<fx:Metadata>[Name]</fx:Metadata>
   	
    <fx:Script>
        <![CDATA[
			import com.wineshop.admin.client.entities.Address;
			import com.wineshop.admin.client.entities.Vineyard;
			import com.wineshop.admin.client.entities.Wine;
			import com.wineshop.admin.client.entities.Wine$Type;
			import com.wineshop.admin.client.services.VineyardRepository;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.data.utils.Managed;
			
			import org.granite.tide.Tide;
			import org.granite.tide.data.model.Page;
			import org.granite.tide.data.model.PageInfo;
			import org.granite.tide.data.model.SortInfo;
			import org.granite.tide.events.TideFaultEvent;
			import org.granite.tide.events.TideResultEvent;
			import org.granite.tide.spring.Context;
			import org.granite.tide.spring.Identity;
			import org.granite.tide.spring.PagedQuery;
			import org.granite.tide.spring.Spring;
			
			PageInfo; SortInfo; Page;
			
			Spring.getInstance().addComponentWithFactory("vineyards", PagedQuery, 
				{ filterClass: Vineyard, elementClass: Vineyard, remoteComponentClass: VineyardRepository, methodName: "findByFilter", maxResults: 12 }, false, true, Tide.RESTRICT_YES
			);
            
			[In] [Bindable]
			public var vineyards:PagedQuery;
			
			[Out] [Bindable]
			public var vineyard:Vineyard = new Vineyard();
			
			[Inject]
			public var vineyardRepository:VineyardRepository;
			
			[Inject] [Bindable]
			public var identity:Identity;
			
			[Inject] [Bindable]
			public var tideContext:Context;
			
			
			private function save():void {
				if (vineyardValidator.validateEntity())
					vineyardRepository.save(vineyard, saveResult);
			}
			
			private function saveResult(event:TideResultEvent):void {
				listVineyards.selectedItem = null;
				this.vineyard = new Vineyard();
				currentState = 'create';
			}
			
			private function save100():void {
				var list:ArrayCollection = new ArrayCollection();
				for (var i:int = 1; i <= 100; i++) {
					var vy:Vineyard = new Vineyard();
					vy.name = "Vineyard " + i;
					vy.address = new Address();
					vy.address.address = "Vineyard " + i;
					list.addItem(vy);
				}
				vineyardRepository.save_1(list);
			}
			
			private function modify():void {
				Managed.resetEntity(this.vineyard);
				this.vineyard = Vineyard(listVineyards.selectedItem);
				currentState = 'edit';
			}
			
			private function cancel():void {
				listVineyards.selectedItem = null;
				Managed.resetEntity(this.vineyard);
				this.vineyard = new Vineyard();
				currentState = 'create';
			}
			
			private function remove():void {
				vineyardRepository.delete_2(vineyard.id, removeResult);
			}
			
			private function removeResult(event:TideResultEvent):void {
				listVineyards.selectedItem = null;
				this.vineyard = new Vineyard();
				currentState = "create";
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:ArrayCollection id="wineTypes" source="{Wine$Type.constants}"/>
		
		<v:FormValidator id="vineyardValidator" entity="{vineyard}" form="{formVineyard}"/>
	</fx:Declarations>
	
	<s:states>
		<s:State name="create"/>
		<s:State name="edit"/>
	</s:states>
	
	<s:VGroup paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10" width="800">
		<s:HGroup id="filter">
			<s:TextInput id="filterName" text="@{vineyards.filter.name}"/>
			<!--s:TextInput id="filterAddress" text="@{vineyards.filter.address.address}"/-->
			<s:Button id="search" label="Search" click="vineyards.fullRefresh()"/>
			<s:Spacer width="100%"/>
			<!--s:Button id="initbase" label="Init base" click="sauve100()"/-->
		</s:HGroup>
		
		<s:DataGrid id="listVineyards" width="100%" height="200" selectionChange="modify()">
			<s:dataProvider><c:SortableAsyncListView list="{vineyards}"/></s:dataProvider>
			<s:columns>
				<s:ArrayList>
					<s:GridColumn sortable="true" dataField="name" headerText="Name"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
	</s:VGroup>
	
	<s:VGroup paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10" width="800">
		<mx:Form id="formVineyard">
			<mx:FormHeading label.create="Create vineyard" label.edit="Edit vineyard"/>
			<mx:FormItem label="Name">
				<s:TextInput id="formName" text="@{vineyard.name}"/>
			</mx:FormItem>
			<mx:FormItem label="Address">
				<s:TextInput id="formAddress" text="@{vineyard.address.address}" width="100%"/>
			</mx:FormItem>
			<mx:FormItem label="Wines">
				<s:HGroup gap="10">
					<s:List id="formWines" dataProvider="{vineyard.wines}">
						<s:itemRenderer>
							<fx:Component>
								<s:ItemRenderer>
									<fx:Declarations>
										<v:FormValidator id="wineValidator" form="{wineEdit}" entity="{data}"/>
									</fx:Declarations>
									<s:states>
										<s:State name="normal"/>
									</s:states>                   
									<s:HGroup id="wineEdit">
										<s:TextInput text="@{data.name}"/>
										<s:TextInput text="@{data.year}"/>
										<s:DropDownList selectedItem="@{data.type}" requireSelection="true"                                                                                     
											dataProvider="{outerDocument.wineTypes}" labelField="name"/>
									</s:HGroup>
								</s:ItemRenderer>							
							</fx:Component>
						</s:itemRenderer>					
					</s:List>				
					
					<s:VGroup gap="10">
						<s:Button label="+" click="vineyard.wines.addItem(new Wine(vineyard))"/>
						<s:Button label="-" enabled="{Boolean(formWines.selectedItem)}" 
								  click="vineyard.wines.removeItemAt(formWines.selectedIndex)"/>
					</s:VGroup>
				</s:HGroup>
			</mx:FormItem>
			<mx:FormItem>
				<s:HGroup>
					<s:Button label="Save" enabled="{tideContext.meta_dirty}"
							  click="save()"/>
					<s:Button label="Remove"
							  enabled="{identity.ifAllGranted('ROLE_ADMIN')}"
							  visible.create="false" visible.edit="true"
							  click="remove()"/>
					<s:Button label="Cancel"
							  visible.create="false" visible.edit="true"
							  click="cancel()"/>
				</s:HGroup>
			</mx:FormItem>
		</mx:Form>
	</s:VGroup>

</s:VGroup>
